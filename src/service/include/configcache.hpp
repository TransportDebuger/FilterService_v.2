
/**
 * @file configcache.hpp
 * @author Artem Ulyanov
 * @company STC Ltd.
 * @date May 2025
 * @brief Кэш конфигураций
 *
 * @details
 * Модуль предоставляет функциональность для кэширования конфигураций различных
 * окружений приложения XML Filter Service. Реализует паттерн "Cache-Aside" для
 * оптимизации доступа к часто используемым конфигурациям и снижения нагрузки
 * на файловую систему.
 *
 * Ключевые особенности реализации:
 * - Потокобезопасный доступ к кэшированным данным
 * - Поддержка множественных окружений (development, production, testing)
 * - Ленивая инициализация кэша при первом обращении
 * - Возможность принудительного обновления кэша
 *
 * Используемые паттерны:
 * - Cache-Aside Pattern для оптимизации доступа к данным
 * - Thread-Safe Singleton для обеспечения потокобезопасности
 * - Lazy Loading для отложенной инициализации
 *
 * @version 1.0
 * @since 1.0
 */
#pragma once
#include <mutex>
#include <nlohmann/json.hpp>
#include <string>

/**
 * @defgroup Configuration Компоненты управления конфигурацией
 */

/**
 * @defgroup Getters Методы получения данных (getters)
 */

/**
 * @defgroup Setters Методы модификации данных (setters)
 */

/**
 * @defgroup Management Методы управления данными
 */

/**
 * @class ConfigCache
 * @brief Кэш конфигураций для различных окружений
 * @ingroup Configuration
 *
 * @details
 * Класс предоставляет потокобезопасный механизм кэширования конфигураций
 * для различных окружений приложения. Используется для оптимизации доступа
 * к часто запрашиваемым конфигурациям и снижения количества операций чтения
 * с диска. Поддерживает множественные окружения и динамическое обновление кэша.
 *
 * Основные возможности:
 * - Получение кэшированной конфигурации для указанного окружения
 * - Обновление кэша для конкретного окружения
 * - Полная очистка кэша
 *
 * @note Класс является потокобезопасным благодаря использованию std::mutex
 * @warning Не рекомендуется хранить в кэше конфигурации большого размера
 *
 * @see ConfigManager
 * @since 1.0
 */
class ConfigCache {
 public:
  /**
     * @brief Получает закешированную конфигурацию для указанного окружения
     * @ingroup Getters
     *
     * @details
     * Метод возвращает кэшированную конфигурацию для указанного окружения,
     * если она присутствует в кэше. Если конфигурация для данного окружения
     * отсутствует, возвращается пустой JSON-объект. Доступ к кэшу
     синхронизирован
     * с помощью мьютекса для обеспечения потокобезопасности.
     *
     * @param[in] env Идентификатор окружения (например, "production",
     "development")
     * @return nlohmann::json Кэшированная конфигурация или пустой объект
     *
     * @note Метод не выполняет загрузку конфигурации из файла
     * @warning Метод не генерирует исключений при отсутствии конфигурации
     *
     * @code
     ConfigCache cache;
     auto config = cache.getCached("production");
     if (!config.empty()) {
         // Использование кэшированной конфигурации
     } else {
         // Загрузка конфигурации из файла
     }
     @endcode
     */
  nlohmann::json getCached(const std::string &env) const;

  /**
     * @brief Обновляет кэш для указанного окружения
     * @ingroup Setters
     *
     * @details
     * Метод обновляет кэшированную конфигурацию для указанного окружения.
     * Если кэш пуст, создаётся новый JSON-объект. Доступ к кэшу синхронизирован
     * с помощью мьютекса для обеспечения потокобезопасности. Метод выполняет
     * валидацию входных данных для предотвращения сохранения некорректной
     конфигурации.
     *
     * @param[in] env Идентификатор окружения
     * @param[in] config Новая конфигурация для кэширования
     *
     * @throw std::invalid_argument При передаче некорректной конфигурации
     *
     * @note Метод перезаписывает существующую конфигурацию для указанного
     окружения
     * @warning Метод не выполняет глубокую валидацию структуры конфигурации
     *
     * @code
     ConfigCache cache;
     nlohmann::json newConfig = loadConfigFromFile("config.json");
     try {
         cache.updateCache("production", newConfig);
     } catch (const std::invalid_argument& e) {
         // Обработка ошибки валидации
     }
     @endcode
     */
  void updateCache(const std::string &env, const nlohmann::json &config);

  /**
     * @brief Очищает весь кэш конфигураций
     * @ingroup Management
     *
     * @details
     * Метод полностью очищает кэш конфигураций для всех окружений.
     * Используется при необходимости принудительной перезагрузки всех
     * конфигураций из файлов. Доступ к кэшу синхронизирован с помощью
     * мьютекса для обеспечения потокобезопасности.
     *
     * @note Метод не генерирует исключений
     * @warning После вызова метода все последующие вызовы getCached() будут
     возвращать пустой объект
     *
     * @code
     ConfigCache cache;
     // При необходимости полной перезагрузки конфигураций
     cache.clearAll();
     // Теперь кэш пуст и будет заполняться по мере необходимости
     @endcode
     */
  void clearAll();

 private:
  /**
   * @brief Мьютекс для синхронизации доступа к кэшу
   * @details Обеспечивает потокобезопасный доступ к кэшированным данным
   */
  mutable std::mutex cacheMutex_;

  /**
   * @brief Кэшированные данные конфигурации
   * @details Хранит конфигурации для различных окружений в формате JSON
   */
  nlohmann::json cachedConfig_;
};